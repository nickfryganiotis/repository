home-page
<q-card
            class="rounded-borders col-2"
            v-for="(img, index) in carousels[n - 1]"
            :key="index"
          >
            <img :src="img" />

            <q-card-section>
              <q-rating
                v-model="ratingModel"
                size="2em"
                :max="5"
                color="yellow"
                readonly
              />

              <div class="q-pa-xs text-caption">317 responses</div>
            </q-card-section>

            <q-card-section class="q-pt-none">
              {{ lorem }}
            </q-card-section>
          </q-card>

<div
          class="row fit justify-start items-center q-gutter-xs q-col-gutter no-wrap"
        >
          <div class="col-2"></div>
          <q-btn
            v-for="n in 4"
            :key="n"
            class="rounded-borders col-2"
            label="Short activity description"
          />
          <div class="col-2"></div>
        </div>







        <q-card
          v-for="(img, index) in activities.slice((n - 1) * 4, n * 4)"
          class="rounded-borders col-2"
          :key="index"
        >
          <img :src="img" />
          <q-card-section>
            <q-rating
              v-model="ratingModel"
              size="2em"
              :max="5"
              color="yellow"
              readonly
            />

            <div class="q-pa-xs text-caption">317 responses</div>
          </q-card-section>

          <q-card-section class="q-pt-none">
            {{ lorem }}
          </q-card-section>
        </q-card>


first way to get data from database and get them into component is using the onBeforeMount function
const activities_back = reactive({
      carousels: "",
      total_act: "",
    });
    onBeforeMount(() => {
      axios.get("http://localhost:5000/get_activities").then((resp) => {
        activities_back.carousels = [
          resp.data.slice(0, 4),
          resp.data.slice(4, 8),
          resp.data.slice(8, 12),
          resp.data.slice(12, 16),
        ];
        activities_back.total_act = resp.data;
        console.log(activities_back.total_act);
      });
    });

In the composition api, instead of having data and methods keys to return in our single file component,
everything is nested inside the setup key, and return what we want to reference in our template.
